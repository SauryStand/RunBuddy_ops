<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
         http://www.springframework.org/schema/context 
         http://www.springframework.org/schema/context/spring-context-4.0.xsd 
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
         http://www.springframework.org/schema/mvc 
         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
         http://www.springframework.org/schema/aop">


    <!--==========================数据源公共部分配置========================-->
    <bean id="abstractDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <!--<property name="filters" value="stat" />-->
        <property name="testWhileIdle" value="false" />
    </bean>
    <!--========================== END ========================-->




    <!--==========================数据源配置开始=============================-->
    <!-- 数据源配置 -->
    <bean id="defaultDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <!-- 配置url、用户、密码 -->
        <property name="url" value="${jdbc.url}" />
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- end -->

    <!-- default Datasource Mybaitis SessionFactory的注册 -->
    <bean id="defaultSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/oracle/*.xml"/>
        <property name="dataSource" ref="defaultDataSource" />
    </bean>

    <!-- default Datasource jdbcTemplate的配置 ，不使用可以屏蔽掉-->
    <bean id="defaultJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name = "dataSource" ref="defaultDataSource" />
    </bean>
    <!-- end -->

    <!-- defaultDataSource 事务管理器 -->
    <bean name="defaultTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource"></property>
    </bean>
    <!-- end -->

    <!--defaultDataSource 事务特性 -->
    <tx:advice id="defaultUserTxAdvice" transaction-manager="defaultTransactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="multiOperation" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- end -->

    <!--defaultDataSource aop事务控制，切入点配置 -->
    <aop:config>
        <aop:pointcut id="another_pc"
                      expression="execution(public * com.tydic.service..*(..))||execution(public * com.tydic.bp.core.service..*(..))" />
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="another_pc" advice-ref="defaultUserTxAdvice" />
    </aop:config>
    <!-- end -->

    <!--==========================数据源配置END=============================-->







    <!--==========================数据源配置开始=============================-->
    <!-- 数据源配置 -->
    <bean id="anotherDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <!-- 配置url、用户、密码 -->
        <property name="url" value="${jdbc.url_2}" />
        <property name="driverClassName" value="${jdbc.driverClassName_2}" />
        <property name="username" value="${jdbc.username_2}" />
        <property name="password" value="${jdbc.password_2}" />
    </bean>
    <!-- end -->

    <!-- another Datasource Mybaitis SessionFactory的注册 -->
    <bean id="anotherSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="anotherDataSource" />
    </bean>
    <!--end-->

    <!-- another Datasource jdbcTemplate的配置，不使用可以屏蔽掉 -->
    <bean id="anotherJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name = "dataSource" ref="anotherDataSource" />
    </bean>
    <!-- end -->


    <!--anotherDataSource 事务管理器，如果数据源不需要事务管理，则可以把事务管理器去掉 -->
    <bean name="anotherTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="anotherDataSource"></property>
    </bean>
    <!-- end -->

    <!--anotherDataSource 事务特性 如果数据源不需要事务，则可以去掉-->
    <tx:advice id="anotherUserTxAdvice" transaction-manager="anotherTransactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="multiOperation" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- end -->

    <!--anotherDataSource aop事务控制，切入点配置，如果数据源不需要事务，则可以去掉-->
    <aop:config>
        <aop:pointcut id="pc_another"
                      expression="execution(public * com.tydic.service..*(..))||execution(public * com.tydic.bp.core.service..*(..))" />
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc_another" advice-ref="anotherUserTxAdvice" />
    </aop:config>
    <!-- end -->
    <!--==========================数据源配置END=============================-->









    <!--============================多个数据源的配置使用多个sqlsessionFactory和多个JdbcTemplate 开始 =============-->
    <!-- 动态切换SqlSessionFactory  -->
    <bean id="sqlSessionDaoSupport" class="com.tydic.bp.core.utils.db.SqlSessionDaoSupport">
        <property name="targetSqlSessionFactorys">
            <map value-type="org.apache.ibatis.session.SqlSessionFactory">
                <entry key="defaultDataSource" value-ref="defaultSqlSessionFactory" />
                <entry key="anotherDataSource" value-ref="anotherSqlSessionFactory" />
            </map>
        </property>
        <property name="defaultTargetSqlSessionFactory" ref="defaultSqlSessionFactory" />
    </bean>


    <!-- 动态切换JdbcTempleate,如果不需要使用jdbcTemplate，则可以屏蔽掉 -->
    <bean id="jdbcDaoSupport" class="com.tydic.bp.core.utils.db.JdbcDaoSupport">
        <property name="targetJdbcFactorys">
            <map value-type="org.springframework.jdbc.core.JdbcTemplate">
                <entry key="defaultDataSource" value-ref="defaultJdbcTemplate" />
                <entry key="anotherDataSource" value-ref="anotherJdbcTemplate" />
            </map>
        </property>
        <property name="defaultJdbcTemplate" ref="defaultJdbcTemplate" />
    </bean>
    <!--============================多个数据源的配置使用多个sqlsessionFactory和多个JdbcTemplate END =============-->


</beans>